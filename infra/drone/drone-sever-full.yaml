---
# Source: drone/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: drone
  namespace: oapp-dev
  labels:
    release: drone
    helm.sh/chart: drone-0.6.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: drone/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: drone
  namespace: oapp-dev
  labels:
    release: drone
    helm.sh/chart: drone-0.6.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12.1"
    app.kubernetes.io/managed-by: Helm
data:
  
  DRONE_GITEA_CLIENT_ID: "3f131a3b-6b9d-493d-b215-1bdca3424040"
  DRONE_GITEA_CLIENT_SECRET: "gto_alabzdgx7notpjisju6rl75p46pd7nygtjpmxhx2bkakowzbwtfq"
  DRONE_GITEA_SERVER: "https://gitea.apps.aro.az.acntech.no"
  DRONE_RPC_SECRET: "032744fbad892b1cd1957249d214a3fa"
  DRONE_SERVER_HOST: "drone.apps.aro.az.acntech.no"
  DRONE_SERVER_PROTO: "https"
---
# Source: drone/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    release: drone
    helm.sh/chart: drone-0.6.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12.1"
    app.kubernetes.io/managed-by: Helm
  name: drone
  namespace: oapp-dev
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: "8Gi"
---
# Source: drone/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: drone
  namespace: oapp-dev
  annotations:
    {}
  labels:
    release: drone
    helm.sh/chart: drone-0.6.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
---
# Source: drone/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone
  namespace: oapp-dev
  labels:
    release: drone
    helm.sh/chart: drone-0.6.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12.1"
    app.kubernetes.io/managed-by: Helm
spec:
  
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: drone
      app.kubernetes.io/instance: drone
      app.kubernetes.io/component: server
  strategy:
        {}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: drone
        app.kubernetes.io/instance: drone
        app.kubernetes.io/component: server
      annotations:
        checksum/secrets: 95fc112379bade7be449e400fc12d180c177a4d6b00c275ea7cc6a2765dce434
    spec:
      automountServiceAccountToken: false
      serviceAccountName: drone
      securityContext:
        {}
      containers:
        - name: server
          securityContext:
            # capabilities:
            #   drop:
            #   - ALL
            # readOnlyRootFilesystem: true
            # runAsNonRoot: true
            runAsUser: 1000900000
          image: "docker.io/drone/drone:2.12.1"
          env:
          - name: DRONE_SERVER_PORT
            value: ":8082"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          resources:
            {}
          envFrom:
            - configMapRef:
                name: drone
          volumeMounts:
            - name: storage-volume
              mountPath: /data
              subPath: ""
      volumes:
        - name: storage-volume
          persistentVolumeClaim:
            claimName: drone
---
# Source: drone/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: drone
  namespace: oapp-dev
  labels:
    release: drone
    helm.sh/chart: drone-0.6.5
    app.kubernetes.io/name: drone
    app.kubernetes.io/instance: drone
    app.kubernetes.io/component: server
    app.kubernetes.io/version: "2.12.1"
    app.kubernetes.io/managed-by: Helm
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
    - host: "drone.apps.aro.az.acntech.no"
      http:
        paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: drone
              port:
                number: 8080
